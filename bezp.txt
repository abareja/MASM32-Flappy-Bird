.386
.model flat, stdcall
option casemap:none

include \masm32\include\msimg32.inc
includelib \masm32\lib\msimg32.lib

include \masm32\include\windows.inc

include \masm32\include\user32.inc
includelib \masm32\lib\user32.lib

include \masm32\include\kernel32.inc
includelib \masm32\lib\kernel32.lib

include C:\masm32\include\gdi32.inc 
includelib C:\masm32\lib\gdi32.lib

include C:\masm32\include\masm32.inc
includelib C:\masm32\lib\masm32.lib

WinMain proto :DWORD, :DWORD, :DWORD, :DWORD
Update proto :HWND

RGB MACRO red, green, blue
    mov eax, red or (green shl 8) or (blue shl 16)
ENDM

Bird struct
	birdW dd ?
	birdH dd ?

	birdPosX dd ?
	birdPosY dd ?

	velocityY dd ?
	acceleration dd ?
Bird ends

.data
	ClassName db "WinClass", 0
	AppName db "Flappy Bird Adrian Bareja", 0
	AppIcon db "bird.ico", 0
	BirdBmpName db "images\birdS.bmp", 0
	BackgroundBmpName db "images\background.bmp", 0
	MyBird Bird <120, 85, 500, 330, 0, 1>

	upForce dd -15
	timerClock dd 16

.data?
	hInstance HINSTANCE ?
	CommandLine LPSTR ?
	BirdBitmap dd ?
	BackgroundBitmap dd ?

.code
	start:
		invoke GetModuleHandle, NULL
		mov hInstance, eax

		invoke GetCommandLine
		mov CommandLine, eax

		invoke WinMain, hInstance, NULL, CommandLine, SW_SHOWDEFAULT   
		invoke ExitProcess, eax

		WinMain proc hInst:HINSTANCE, hPrevInst:HINSTANCE, CmdLine:LPSTR, CmdShow:DWORD
			LOCAL wc:WNDCLASSEX
			LOCAL msg:MSG
	    	LOCAL hwnd:HWND

			mov wc.cbSize, sizeof WNDCLASSEX
			mov wc.style, 0
			mov wc.lpfnWndProc, offset WndProc
			mov wc.cbClsExtra, NULL
	    	mov wc.cbWndExtra, NULL
			push hInstance
			pop wc.hInstance
			mov wc.hbrBackground, NULL
			mov wc.lpszMenuName, NULL
			mov wc.lpszClassName, offset ClassName

			invoke LoadImage, NULL, addr AppIcon, IMAGE_ICON, 0, 0, LR_LOADFROMFILE or LR_DEFAULTSIZE

			mov wc.hIcon, eax
			mov wc.hIconSm, eax
			invoke LoadCursor, NULL, IDC_ARROW
			mov wc.hCursor, eax
			invoke RegisterClassEx, addr wc

			invoke CreateWindowEx, NULL,\
				addr ClassName,\
				addr AppName,\
				WS_OVERLAPPED or WS_CAPTION or WS_SYSMENU or WS_MINIMIZEBOX or WS_VISIBLE,\
				CW_USEDEFAULT,\
				CW_USEDEFAULT,\
				1200,\
				750,\
				NULL,\
				NULL,\
				hInst,\
				NULL

			mov hwnd, eax
			invoke ShowWindow, hwnd, CmdShow
			invoke UpdateWindow, hwnd

			 .WHILE TRUE
	            invoke GetMessage, addr msg, NULL, 0, 0
	            .BREAK .IF (!eax)
	            invoke TranslateMessage, addr msg
	            invoke DispatchMessage, addr msg
	   		.ENDW
			mov eax, msg.wParam

			ret
		WinMain endp

		LoadBackground proc, hMemDC:HDC, hdc:HDC, rect:RECT
			invoke LoadImage, NULL, addr BackgroundBmpName, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE
		    mov BackgroundBitmap, eax

		    invoke SelectObject, hMemDC, BackgroundBitmap
			invoke BitBlt, hdc, 0, 0, rect.right, rect.bottom, hMemDC, 0, 0, SRCCOPY

			invoke DeleteObject, BackgroundBitmap
		    ret
		LoadBackground endp

		LoadBird proc, hMemDC:HDC, hdc:HDC, rect:RECT
			invoke LoadImage, NULL, addr BirdBmpName, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE or LR_CREATEDIBSECTION
		    mov BirdBitmap, eax

			invoke SelectObject, hMemDC, BirdBitmap
			RGB 255, 0, 0
			invoke TransparentBlt, hdc, MyBird.birdPosX, MyBird.birdPosY, MyBird.birdW, MyBird.birdH, hMemDC, 0, 0, MyBird.birdW, MyBird.birdH, eax

			invoke DeleteObject, BirdBitmap
			ret
		LoadBird endp

		Update proc, hWnd:HWND
			
			mov eax, MyBird.acceleration
			add MyBird.velocityY, eax

			mov eax, MyBird.velocityY
			add MyBird.birdPosY, eax

			invoke InvalidateRect, hWnd, NULL, FALSE
			invoke UpdateWindow, hWnd

			ret
		Update endp

		WndProc proc hWnd:HWND, uMsg:UINT, wParam:WPARAM, lParam:LPARAM
		    LOCAL hdc:HDC
			LOCAL ps:PAINTSTRUCT
			LOCAL rect:RECT
			LOCAL hMemDC:HDC

			.IF uMsg==WM_CREATE
				invoke SetTimer, hWnd, NULL, timerClock, NULL
		    .ELSEIF uMsg==WM_DESTROY
		        invoke PostQuitMessage, NULL
		    .ELSEIF uMsg==WM_TIMER
		    	
		   	.ELSEIF uMsg==WM_ERASEBKGND
		   		ret
		    .ELSEIF uMsg==WM_PAINT
		    	invoke BeginPaint, hWnd, addr ps
				mov hdc, eax

				invoke GetClientRect, hWnd, addr rect

				invoke CreateCompatibleDC, hdc
				mov hMemDC, eax

				invoke LoadBackground, hMemDC, hdc, rect
				invoke LoadBird, hMemDC, hdc, rect

				invoke DeleteDC, hdc
				invoke EndPaint, hWnd, addr ps
			.ELSEIF uMsg==WM_CHAR || uMsg==WM_LBUTTONDOWN
				mov eax, upForce
				mov MyBird.velocityY, eax
		    .ELSE
		        invoke DefWindowProc, hWnd, uMsg, wParam, lParam
		        ret
		    .ENDIF
		    xor eax, eax
		    ret
		WndProc endp

	end start
